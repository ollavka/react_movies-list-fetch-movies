{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAddMovie","useState","moviePreview","setMoviePreview","setQuery","hasSearchError","setHasSearchError","isSearching","setIsSearching","onSubmit","event","a","preventDefault","data","Object","hasOwn","movieUrl","movieData","imdbID","Poster","posterUrl","test","searchedMovie","Title","Plot","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","onAddMovieToList","useCallback","newMovie","prevMovies","some","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ba25714.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_KEY = '20e76704';\n\nconst API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import {\n  FC, useState, FormEvent, ChangeEvent,\n} from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  onAddMovie: (newMovie: Movie) => void;\n};\n\nexport const FindMovie: FC<Props> = ({ onAddMovie }) => {\n  const [moviePreview, setMoviePreview] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [hasSearchError, setHasSearchError] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const getMoviePoster = (imgUrl: string) => {\n    // eslint-disable-next-line max-len\n    const validImgUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    // eslint-disable-next-line max-len\n    const defaultImg = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n    if (validImgUrl.test(imgUrl)) {\n      return imgUrl;\n    }\n\n    return defaultImg;\n  };\n\n  const onSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n\n    setHasSearchError(false);\n    setIsSearching(true);\n\n    try {\n      const data = await getMovie(query);\n\n      if (Object.hasOwn(data, 'Error')) {\n        const errorResponse = data as ResponseError;\n\n        throw new Error(errorResponse.Error);\n      }\n\n      const movieData = data as MovieData;\n\n      const movieUrl = `https://www.imdb.com/title/${movieData.imdbID}`;\n      const posterUrl = getMoviePoster(movieData.Poster);\n\n      const searchedMovie: Movie = {\n        title: movieData.Title,\n        description: movieData.Plot,\n        imdbId: movieData.imdbID,\n        imgUrl: posterUrl,\n        imdbUrl: movieUrl,\n      };\n\n      setMoviePreview(searchedMovie);\n    } catch (error) {\n      setHasSearchError(true);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const onAddNewMovie = () => {\n    if (moviePreview) {\n      onAddMovie(moviePreview);\n\n      setHasSearchError(false);\n      setQuery('');\n    }\n\n    setMoviePreview(null);\n  };\n\n  const handleChangeQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    setHasSearchError(false);\n    setQuery(event.target.value);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={onSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': hasSearchError,\n              })}\n              value={query}\n              onChange={handleChangeQuery}\n            />\n          </div>\n\n          {hasSearchError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isSearching,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {moviePreview && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onAddNewMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      {moviePreview && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={moviePreview} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState, useCallback } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport './App.scss';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onAddMovieToList = useCallback((newMovie: Movie) => {\n    setMovies(prevMovies => {\n      if (prevMovies.some(movie => movie.imdbId === newMovie.imdbId)) {\n        return prevMovies;\n      }\n\n      return [\n        ...prevMovies,\n        newMovie,\n      ];\n    });\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies.length > 0 && (\n          <MoviesList movies={movies} />\n        )}\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={onAddMovieToList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}